{
  "swagger": "2.0",
  "info": {
    "description": "This is an API for Imperva User Management",
    "version": "v1",
    "title": "User Management API",
    "termsOfService": "https://www.imperva.com/legal/terms-of-use"
  },
  "host": "api.imperva.com",
  "basePath": "/user-management",
  "tags": [
    {
      "name": "v1"
    }
  ],
  "schemes": [
    "https"
  ],
  "security": [
    {
      "api_id": [],
      "api_key": []
    }
  ],
  "securityDefinitions": {
    "api_id": {
      "description": "An API ID created and managed in the Imperva Cloud Security Console and used for authentication",
      "in": "query",
      "name": "api_id",
      "type": "apiKey"
    },
    "api_key": {
      "description": "An API key created and managed in the Imperva Cloud Security Console and used for authentication",
      "in": "query",
      "name": "api_key",
      "type": "apiKey"
    }
  },
  "paths": {
    "/v1/abilities/accounts/{accountId}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Get Account Abilities By Account ID",
        "description": "Role management APIs for abilities management",
        "operationId": "getAllAvailableAccountAbilitiesByAccountId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "Unique ID of the required account.",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Legal response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ability"
              }
            }
          },
          "406": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/UserManagementApiException"
            }
          }
        }
      }
    },
    "/v1/assignments": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Get role assignments By User Email And Account ID",
        "description": "Role management APIs for roles assignment",
        "operationId": "getUserAssignmentByUserEmail",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userEmail",
            "in": "query",
            "description": "The email of the required user",
            "required": true,
            "type": "string"
          },
          {
            "name": "accountId",
            "in": "query",
            "description": "Unique ID of the required account",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Legal response",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "406": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/UserManagementApiException"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Assign Users To Roles or Delete Existing Assignment",
        "description": "Role management APIs for roles assignment",
        "operationId": "updateAssignments",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The details required for the new assignments.",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/requestedAssignment"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Legal response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          },
          "406": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/UserManagementApiException"
            }
          }
        }
      }
    },
    "/v1/roles": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Get Role Details By Account ID, User Email, or Role Name",
        "description": "Role management APIs for role management",
        "operationId": "getRolesDetails",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "description": "Unique ID of the required account",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "userEmail",
            "in": "query",
            "description": "The email of the required user",
            "required": false,
            "type": "string"
          },
          {
            "name": "roleName",
            "in": "query",
            "description": "The name of the required role",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Legal response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/roleDetails"
              }
            }
          },
          "406": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/UserManagementApiException"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Create New Role",
        "description": "Role management APIs for role management",
        "operationId": "createRole",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The details required for creating the role.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/createRole"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Legal response",
            "schema": {
              "$ref": "#/definitions/roleDetails"
            }
          },
          "406": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/UserManagementApiException"
            }
          }
        }
      }
    },
    "/v1/roles/{roleId}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Get Role Details By Role ID",
        "description": "Role management APIs for role management",
        "operationId": "getRoleDetailsByRoleId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "roleId",
            "in": "path",
            "description": "The role ID of the required role.",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Legal response",
            "schema": {
              "$ref": "#/definitions/roleDetails"
            }
          },
          "406": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/UserManagementApiException"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Update Role Details By Role ID",
        "description": "Role management APIs for role management",
        "operationId": "updateRole",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "roleId",
            "in": "path",
            "description": "The role ID of the required role.",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The details required for updating the role.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/updateRole"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Legal response",
            "schema": {
              "$ref": "#/definitions/roleDetails"
            }
          },
          "406": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/UserManagementApiException"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Delete Role By Role ID",
        "description": "Role management APIs for role management",
        "operationId": "deleteRoleByRoleId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "roleId",
            "in": "path",
            "description": "The role ID of the required role.",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Legal response",
            "schema": {
              "$ref": "#/definitions/ApiSuccessResponse"
            }
          },
          "406": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/UserManagementApiException"
            }
          }
        }
      }
    },
    "/v1/users": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Get User Details By User Email and Account ID",
        "description": "User management APIs for user management",
        "operationId": "getUserByUserEmail",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userEmail",
            "in": "query",
            "description": "The email of the required user",
            "required": true,
            "type": "string"
          },
          {
            "name": "accountId",
            "in": "query",
            "description": "Unique ID of the required account",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Legal response",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "406": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/UserManagementApiException"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Create New User",
        "description": "User management APIs for user management",
        "operationId": "createUser",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The details required to create new user.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/createUser"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Legal response",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "406": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/UserManagementApiException"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Delete User Details By User Email",
        "description": "User management APIs for user management",
        "operationId": "deleteUserByUserEmail",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userEmail",
            "in": "query",
            "description": "The email of the required user",
            "required": true,
            "type": "string"
          },
          {
            "name": "accountId",
            "in": "query",
            "description": "Unique ID of the required account",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Legal response",
            "schema": {
              "$ref": "#/definitions/ApiSuccessResponse"
            }
          },
          "406": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/UserManagementApiException"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "StackTraceElement": {
      "type": "object",
      "required": [
        "classLoaderName",
        "className",
        "fileName",
        "lineNumber",
        "methodName",
        "moduleName",
        "moduleVersion",
        "nativeMethod"
      ],
      "properties": {
        "classLoaderName": {
          "type": "string"
        },
        "moduleName": {
          "type": "string"
        },
        "moduleVersion": {
          "type": "string"
        },
        "methodName": {
          "type": "string"
        },
        "fileName": {
          "type": "string"
        },
        "lineNumber": {
          "type": "integer",
          "format": "int32"
        },
        "className": {
          "type": "string"
        },
        "nativeMethod": {
          "type": "boolean"
        }
      }
    },
    "Throwable": {
      "type": "object",
      "required": [
        "cause",
        "localizedMessage",
        "message",
        "stackTrace",
        "suppressed"
      ],
      "properties": {
        "cause": {
          "$ref": "#/definitions/Throwable"
        },
        "stackTrace": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/StackTraceElement"
          }
        },
        "message": {
          "type": "string"
        },
        "suppressed": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Throwable"
          }
        },
        "localizedMessage": {
          "type": "string"
        }
      }
    },
    "User": {
      "type": "object",
      "required": [
        "rolesDetails"
      ],
      "properties": {
        "userId": {
          "type": "integer",
          "format": "int64",
          "example": 112233,
          "description": "The ID of the user that the action was done in."
        },
        "accountId": {
          "type": "integer",
          "format": "int64",
          "example": 123456,
          "description": "ID of the account that was acted on."
        },
        "firstName": {
          "type": "string",
          "example": "John",
          "description": "The first name of the user."
        },
        "lastName": {
          "type": "string",
          "example": "Snow",
          "description": "The last name of the user."
        },
        "userEmail": {
          "type": "string",
          "example": "userEmail@imperva.com",
          "description": "The userEmail of the user that was acted on."
        },
        "rolesDetails": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/roleShortDetails"
          }
        }
      },
      "description": "User Details"
    },
    "UserAssignment": {
      "type": "object",
      "properties": {
        "userEmail": {
          "type": "string",
          "example": "example_email@imperva.com",
          "description": "The email of user assigned to the role."
        },
        "accountId": {
          "type": "integer",
          "format": "int64",
          "example": 123,
          "description": "The account id of user."
        }
      },
      "description": "User Assignment Details"
    },
    "UserManagementApiException": {
      "type": "object",
      "required": [
        "cause",
        "errorCode",
        "localizedMessage",
        "message",
        "placeholders",
        "stackTrace",
        "suppressed"
      ],
      "properties": {
        "cause": {
          "$ref": "#/definitions/Throwable"
        },
        "stackTrace": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/StackTraceElement"
          }
        },
        "errorCode": {
          "type": "string",
          "enum": [
            "STARTUP_FAILURE",
            "MISSING_PARAMETERS",
            "DATA_NOT_FOUND",
            "BAD_DATA",
            "INTERNAL_ERROR",
            "ILLEGAL_OPERATION",
            "ACCOUNT_FOR_MIGRATION_IS_NULL",
            "MIGRATE_FAILURE_FAILED_RECEIVING_MIGRATION_DATA_FROM_MY",
            "MIGRATE_FAILURE_GENERAL_FAILURE_RECEIVING_MIGRATION_DATA_FROM_MY",
            "MIGRATE_FAILURE_NON_ENTERPRISE_ACCOUNT",
            "MIGRATE_FAILURE_NO_ADMIN_USER_FOR_ACCOUNT",
            "MIGRATE_FAILURE_ACCOUNT_ALREADY_MIGRATED",
            "MIGRATE_FAILURE_ABILITY_IS_MISSING_IN_MS_DB",
            "MIGRATE_FAILURE_NO_ROLES_CREATED",
            "MIGRATE_FAILURE_NUMBER_OF_CREATED_ROLES_IS_WRONG",
            "MIGRATE_FAILURE_DIFFERENCE_IN_USER_ABILITIES",
            "MIGRATE_FAILURE_ACCOUNT_DOES_NOT_CONTAIN_USERS",
            "MIGRATE_FAILURE_EXTERNAL_USER_WITH_PERMISSION_ON_SUB_ACCOUNT",
            "UNAUTHORIZED",
            "MIGRATE_FAILURE_ROLLBACK_FAILED",
            "NO_SUCH_USER",
            "NO_SUCH_ACCOUNT",
            "NO_SUCH_ROLE",
            "MISSING_ROLE_NAME",
            "ADMIN_ROLE_ALREADY_EXISTS",
            "API_ROLE_NOT_EDITABLE",
            "ROLE_CANNOT_BE_REMOVED",
            "ROLE_NAME_UNIQUENESS",
            "ROLE_IS_ASSIGNED",
            "FAILED_TO_GET_ACCOUNT_ABILITIES",
            "NO_SUCH_ABILITY",
            "CANNOT_CHANGE_ADMIN_WITH_NO_ROLES",
            "DEFAULT_ERROR_MESSAGE",
            "API_PARAM_IS_MISSING",
            "API_ERROR_OCCURRED_WHILE_CREATING_NEW_ROLE",
            "API_PARAM_IS_MISSING_OR_INVALID",
            "ROLE_CANNOT_BE_CREATED_ON_SUB_ACCOUNT",
            "CANNOT_ASSIGN_MORE_THAN_MAX_ROLES_TO_USER",
            "API_HIDDEN_ABILITY",
            "FAILED_TO_GET_CUSTOMER_ADMIN_ACCOUNT_ABILITIES",
            "NO_SUCH_FEATURE",
            "API_NO_SUCH_ABILITY",
            "MIGRATE_FAILURE_ACCOUNT_NOT_SUPPORTED",
            "NO_SUCH_ACCOUNT_TYPE",
            "INVALID_PERCENTAGE",
            "NO_SUCH_USER_EMAIL",
            "API_NO_SUCH_ROLE_WITH_ROLE_ID",
            "NO_SUCH_ROLE_EXIST_ON_THE_ACCOUNT",
            "MAX_ROLES_PER_USER",
            "MIGRATE_FAILURE_FAILED_TO_LOAD_DUMMY_RESELLERS_FILE",
            "MIGRATE_FAILURE_ACCOUNT_IS_A_DUMMY_RESELLER",
            "READ_ONLY_ROLE_ALREADY_EXISTS",
            "DEFAULT_ROLE_ALREADY_EXISTS",
            "API_NO_SUCH_ACCOUNT_EXIST",
            "API_ERROR_AT_CREATE_USER",
            "API_ERROR_AT_DELETE_USER",
            "API_ERROR_AT_GET_USER",
            "API_USER_EMAIL_IS_ILLEGAL",
            "API_CANT_DELETE_ADMIN_USER",
            "API_NO_SUCH_ROLE_WITH_ROLE_NAME",
            "API_PARAM_SHOULD_NOT_BE_EXIST",
            "API_CANT_CREATE_USER_USER_ALREADY_EXISTS",
            "API_CANT_CREATE_USER_WITH_CAN_MANAGE_SUB_ACCOUNT_ABILITY",
            "API_UNRECOGNIZED_PROPERTY",
            "ABILITY_IN_ROLES_USE",
            "CANNOT_DELETE_MY_ABILITY",
            "ABILITY_NAME_UNIQUENESS",
            "ABILITY_DISPLAY_NAME_UNIQUENESS",
            "ABILITY_ILLEGAL_ACCESS_TYPE",
            "ABILITY_ILLEGAL_SERVICE",
            "ABILITY_ILLEGAL_ACCOUNT_TYPE",
            "FAILED_GET_ABILITY_FROM_MY",
            "ABILITY_DOESNT_EXIST_IN_MY",
            "ABILITY_EXISTS_IN_MY",
            "ABILITY_ENTITLEMENT_LIST_IS_EMPTY",
            "ABILITY_ID_INPUT_IS_ILLEGAL",
            "ABILITY_NAME_IS_NULL_OR_EMPTY",
            "ABILITY_DISPLAY_NAME_IS_NULL_OR_EMPTY"
          ]
        },
        "placeholders": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "message": {
          "type": "string"
        },
        "suppressed": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Throwable"
          }
        },
        "localizedMessage": {
          "type": "string"
        }
      }
    },
    "ability": {
      "type": "object",
      "properties": {
        "abilityKey": {
          "type": "string",
          "example": "canViewSite",
          "description": "The ability key."
        },
        "abilityDisplayName": {
          "type": "string",
          "example": "View sites",
          "description": "The ability display name."
        },
        "isRelevantForSubAccount": {
          "type": "boolean",
          "example": true,
          "description": "Is ability relevant for sub-account."
        }
      },
      "description": "Ability fields"
    },
    "createRole": {
      "type": "object",
      "properties": {
        "roleName": {
          "type": "string",
          "example": "viewOnlyRole",
          "description": "The role name."
        },
        "roleDescription": {
          "type": "string",
          "example": "Default user role.",
          "description": "Description of the role."
        },
        "accountId": {
          "type": "integer",
          "format": "int64",
          "example": 1234567,
          "description": "ID of the account that was acted on."
        },
        "roleAbilities": {
          "type": "array",
          "example": [
            "canManageApiKey",
            "canPurgeCache"
          ],
          "description": "The abilities keys that the role contains.",
          "items": {
            "type": "string"
          }
        }
      },
      "description": "Create role allowed fields"
    },
    "createUser": {
      "type": "object",
      "properties": {
        "accountId": {
          "type": "integer",
          "format": "int64",
          "example": 123456,
          "description": "ID of the account that was acted on."
        },
        "userEmail": {
          "type": "string",
          "example": "userEmail@imperva.com",
          "description": "The userEmail of the user that was acted on."
        },
        "roleIds": {
          "type": "array",
          "example": [
            11,
            13
          ],
          "description": "List of role IDs to add to the user. Use roleIds or roleNames to add roles to the user, but not both.",
          "items": {
            "type": "integer",
            "format": "int64"
          }
        },
        "roleNames": {
          "type": "array",
          "example": [
            "viewOnlyRole"
          ],
          "description": "List of role names to add to the user. Use roleIds or roleNames to add roles to the user, but not both.",
          "items": {
            "type": "string"
          }
        },
        "firstName": {
          "type": "string",
          "example": "John",
          "description": "The first name of the user that was acted on."
        },
        "lastName": {
          "type": "string",
          "example": "Snow",
          "description": "The last name of the user that was acted on."
        }
      },
      "description": "Create User Required Details"
    },
    "requestedAssignment": {
      "type": "object",
      "properties": {
        "userEmail": {
          "type": "string",
          "example": "email@imperva.com",
          "description": "The email of the user that was acted on."
        },
        "accountId": {
          "type": "integer",
          "format": "int64",
          "example": 123456,
          "description": "ID of the account that was acted on."
        },
        "roleIds": {
          "type": "array",
          "example": [
            11,
            13
          ],
          "description": "List of roles IDs to add to the user.",
          "items": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "description": "Role Assignment Data"
    },
    "roleDetails": {
      "type": "object",
      "properties": {
        "roleId": {
          "type": "integer",
          "format": "int64",
          "example": 123,
          "description": "ID of the role that was acted on."
        },
        "roleName": {
          "type": "string",
          "example": "viewOnlyRole",
          "description": "The name of the role that was acted on."
        },
        "roleDescription": {
          "type": "string",
          "example": "Default user role.",
          "description": "Description of the role."
        },
        "accountId": {
          "type": "integer",
          "format": "int64",
          "example": 1234567,
          "description": "ID of the account that was acted on."
        },
        "accountName": {
          "type": "string",
          "example": "Example Account",
          "description": "The name of the account that was acted on."
        },
        "roleAbilities": {
          "type": "array",
          "example": [
            "canManageApiKey",
            "canPurgeCache"
          ],
          "description": "The abilities that the role contains.",
          "items": {
            "$ref": "#/definitions/ability"
          }
        },
        "userAssignment": {
          "type": "array",
          "example": [
            {
              "userEmail": "example_email@imperva.com",
              "accountId": 123
            }
          ],
          "description": "The emails and account ids of users assigned to the role.",
          "items": {
            "$ref": "#/definitions/UserAssignment"
          }
        },
        "updateDate": {
          "type": "string",
          "example": "2019-03-31 14:10:28",
          "description": "The last update date of this role."
        },
        "isEditable": {
          "type": "boolean",
          "example": true,
          "description": "Whether or not the role can be modified."
        }
      },
      "description": "role details"
    },
    "roleShortDetails": {
      "type": "object",
      "properties": {
        "roleId": {
          "type": "integer",
          "format": "int64",
          "example": 29,
          "description": "The role ID."
        },
        "roleName": {
          "type": "string",
          "example": "viewOnlyRole",
          "description": "The role name."
        }
      },
      "description": "Role Short Details"
    },
    "ApiSuccessResponse": {
      "type": "object",
      "properties": {
        "code": {
          "description": "Internal response code",
          "example": 200,
          "format": "int64",
          "type": "integer"
        },
        "debug_info": {
          "additionalProperties": {
            "type": "number"
          },
          "description": "Debug information",
          "example": "{}",
          "type": "object"
        },
        "message": {
          "description": "Response message",
          "example": "OK",
          "type": "string"
        }
      },
      "description": "Basic API success response"
    },
    "updateRole": {
      "type": "object",
      "properties": {
        "roleName": {
          "type": "string",
          "example": "viewOnlyRole",
          "description": "The name of the role that was acted on."
        },
        "roleDescription": {
          "type": "string",
          "example": "Default user role.",
          "description": "The description of the role that was acted on."
        },
        "roleAbilities": {
          "type": "array",
          "example": [
            "canManageApiKey",
            "canPurgeCache"
          ],
          "description": "The abilities keys that the role contains.",
          "items": {
            "type": "string"
          }
        }
      },
      "description": "Update role allowed fields"
    }
  }
}